
= fastai.structured

== Introduction and overview

```
...example...
```


== Module Functions

{{method set_plot_sizes,}}

{{method parallel_trees,}}

{{method draw_tree,Draws a representation of a random forest in IPython.

Parameters:
-----------
t: The tree you wish to draw
df: The data used to train the tree. This is used to get the names of the features.}}

{{method combine_date,}}

{{method get_sample,Gets a random sample of n rows from df, without replacement.

Parameters:
-----------
df: A pandas data frame, that you wish to sample from.
n: The number of rows you wish to sample.

Returns:
--------
return value: A random sample of n rows of df.

Examples:
---------
>>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})
>>> df
   col1 col2
0     1    a
1     2    b
2     3    a

>>> get_sample(df, 2)
   col1 col2
1     2    b
2     3    a}}

{{method add_datepart,add_datepart converts a column of df from a datetime64 to many columns containing
the information from the date. This applies changes inplace.

Parameters:
-----------
df: A pandas data frame. df gain several new columns.
fldname: A string that is the name of the date column you wish to expand.
    If it is not a datetime64 series, it will be converted to one with pd.to_datetime.
drop: If true then the original date column will be removed.
time: If true time features: Hour, Minute, Second will be added.

Examples:
---------

>>> df = pd.DataFrame({ 'A' : pd.to_datetime(['3/11/2000', '3/12/2000', '3/13/2000'], infer_datetime_format=False) })
>>> df

    A
0   2000-03-11
1   2000-03-12
2   2000-03-13

>>> add_datepart(df, 'A')
>>> df

    AYear AMonth AWeek ADay ADayofweek ADayofyear AIs_month_end AIs_month_start AIs_quarter_end AIs_quarter_start AIs_year_end AIs_year_start AElapsed
0   2000  3      10    11   5          71         False         False           False           False             False        False          952732800
1   2000  3      10    12   6          72         False         False           False           False             False        False          952819200
2   2000  3      11    13   0          73         False         False           False           False             False        False          952905600}}

{{method is_date,}}

{{method train_cats,Change any columns of strings in a panda's dataframe to a column of
catagorical values. This applies the changes inplace.

Parameters:
-----------
df: A pandas dataframe. Any columns of strings will be changed to
    categorical values.

Examples:
---------

>>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})
>>> df
   col1 col2
0     1    a
1     2    b
2     3    a

note the type of col2 is string

>>> train_cats(df)
>>> df

   col1 col2
0     1    a
1     2    b
2     3    a

now the type of col2 is category}}

{{method apply_cats,Changes any columns of strings in df into categorical variables using trn as
a template for the category codes.

Parameters:
-----------
df: A pandas dataframe. Any columns of strings will be changed to
    categorical values. The category codes are determined by trn.

trn: A pandas dataframe. When creating a category for df, it looks up the
    what the category's code were in trn and makes those the category codes
    for df.

Examples:
---------
>>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})
>>> df
   col1 col2
0     1    a
1     2    b
2     3    a

note the type of col2 is string

>>> train_cats(df)
>>> df

   col1 col2
0     1    a
1     2    b
2     3    a

now the type of col2 is category {a : 1, b : 2}

>>> df2 = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['b', 'a', 'a']})
>>> apply_cats(df2, df)

       col1 col2
    0     1    b
    1     2    a
    2     3    a

now the type of col is category {a : 1, b : 2}}}

{{method fix_missing,Fill missing data in a column of df with the median, and add a {name}_na column
which specifies if the data was missing.

Parameters:
-----------
df: The data frame that will be changed.

col: The column of data to fix by filling in missing data.

name: The name of the new filled column in df.

na_dict: A dictionary of values to create na's of and the value to insert. If
    name is not a key of na_dict the median will fill any missing data. Also
    if name is not a key of na_dict and there is no missing data in col, then
    no {name}_na column is not created.


Examples:
---------
>>> df = pd.DataFrame({'col1' : [1, np.NaN, 3], 'col2' : [5, 2, 2]})
>>> df
   col1 col2
0     1    5
1   nan    2
2     3    2

>>> fix_missing(df, df['col1'], 'col1', {})
>>> df
   col1 col2 col1_na
0     1    5   False
1     2    2    True
2     3    2   False


>>> df = pd.DataFrame({'col1' : [1, np.NaN, 3], 'col2' : [5, 2, 2]})
>>> df
   col1 col2
0     1    5
1   nan    2
2     3    2

>>> fix_missing(df, df['col2'], 'col2', {})
>>> df
   col1 col2
0     1    5
1   nan    2
2     3    2


>>> df = pd.DataFrame({'col1' : [1, np.NaN, 3], 'col2' : [5, 2, 2]})
>>> df
   col1 col2
0     1    5
1   nan    2
2     3    2

>>> fix_missing(df, df['col1'], 'col1', {'col1' : 500})
>>> df
   col1 col2 col1_na
0     1    5   False
1   500    2    True
2     3    2   False}}

{{method numericalize,Changes the column col from a categorical type to it's integer codes.

Parameters:
-----------
df: A pandas dataframe. df[name] will be filled with the integer codes from
    col.

col: The column you wish to change into the categories.
name: The column name you wish to insert into df. This column will hold the
    integer codes.

max_n_cat: If col has more categories than max_n_cat it will not change the
    it to its integer codes. If max_n_cat is None, then col will always be
    converted.

Examples:
---------
>>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})
>>> df
   col1 col2
0     1    a
1     2    b
2     3    a

note the type of col2 is string

>>> train_cats(df)
>>> df

   col1 col2
0     1    a
1     2    b
2     3    a

now the type of col2 is category { a : 1, b : 2}

>>> numericalize(df, df['col2'], 'col3', None)

   col1 col2 col3
0     1    a    1
1     2    b    2
2     3    a    1}}

{{method scale_vars,}}

{{method proc_df,proc_df takes a data frame df and splits off the response variable, and
changes the df into an entirely numeric dataframe.

Parameters:
-----------
df: The data frame you wish to process.

y_fld: The name of the response variable

skip_flds: A list of fields that dropped from df.

ignore_flds: A list of fields that are ignored during processing.

do_scale: Standardizes each column in df. Takes Boolean Values(True,False)

na_dict: a dictionary of na columns to add. Na columns are also added if there
    are any missing values.

preproc_fn: A function that gets applied to df.

max_n_cat: The maximum number of categories to break into dummy values, instead
    of integer codes.

subset: Takes a random subset of size subset from df.

mapper: If do_scale is set as True, the mapper variable
    calculates the values used for scaling of variables during training time (mean and standard deviation).

Returns:
--------
[x, y, nas, mapper(optional)]:

    x: x is the transformed version of df. x will not have the response variable
        and is entirely numeric.

    y: y is the response variable

    nas: returns a dictionary of which nas it created, and the associated median.

    mapper: A DataFrameMapper which stores the mean and standard deviation of the corresponding continuous
    variables which is then used for scaling of during test-time.

Examples:
---------
>>> df = pd.DataFrame({'col1' : [1, 2, 3], 'col2' : ['a', 'b', 'a']})
>>> df
   col1 col2
0     1    a
1     2    b
2     3    a

note the type of col2 is string

>>> train_cats(df)
>>> df

   col1 col2
0     1    a
1     2    b
2     3    a

now the type of col2 is category { a : 1, b : 2}

>>> x, y, nas = proc_df(df, 'col1')
>>> x

   col2
0     1
1     2
2     1

>>> data = DataFrame(pet=["cat", "dog", "dog", "fish", "cat", "dog", "cat", "fish"],
             children=[4., 6, 3, 3, 2, 3, 5, 4],
             salary=[90, 24, 44, 27, 32, 59, 36, 27])

>>> mapper = DataFrameMapper([(:pet, LabelBinarizer()),
                      ([:children], StandardScaler())])

>>>round(fit_transform!(mapper, copy(data)), 2)

8x4 Array{Float64,2}:
1.0  0.0  0.0   0.21
0.0  1.0  0.0   1.88
0.0  1.0  0.0  -0.63
0.0  0.0  1.0  -0.63
1.0  0.0  0.0  -1.46
0.0  1.0  0.0  -0.63
1.0  0.0  0.0   1.04
0.0  0.0  1.0   0.21}}

{{method rf_feat_importance,}}

{{method set_rf_samples,Changes Scikit learn's random forests to give each tree a random sample of
n random rows.}}

{{method reset_rf_samples,Undoes the changes produced by set_rf_samples.
    }}

{{method get_nn_mappers,}}

