
= fastai.nlp

== Introduction and overview

```
...example...
```


== {{class DotProdNB:Module}}

=== Arguments
{{arg nf,,}}

{{arg ny,,}}

{{arg w_adj,,0.4}}

{{arg r_adj,,10}}

=== Methods

{{method forward,}}

== {{class SimpleNB:Module}}

=== Arguments
{{arg nf,,}}

{{arg ny,,}}

=== Methods

{{method forward,}}

== {{class BOW_Learner:Learner}}

=== Arguments
{{arg data,,}}

{{arg models,,}}

=== Methods

{{method _get_crit,}}

== {{class BOW_Dataset:Dataset}}

=== Arguments
{{arg bow,,}}

{{arg y,,}}

{{arg max_len,,}}

=== Methods

{{method __getitem__,}}

{{method __len__,}}

== {{class TextClassifierData:ModelData}}

=== Methods

{{method c,}}

{{method r,}}

{{method get_model,}}

{{method dotprod_nb_learner,}}

{{method nb_learner,}}

{{method from_bow,}}

== {{class LanguageModelLoader}}

=== Arguments
{{arg ds,,}}

{{arg bs,,}}

{{arg bptt,,}}

{{arg backwards,,False}}

=== Methods

{{method __iter__,}}

{{method __len__,}}

{{method __next__,}}

{{method batchify,}}

{{method get_batch,}}

== {{class RNN_Learner:Learner}}

=== Arguments
{{arg data,,}}

{{arg models,,}}

=== Methods

{{method _get_crit,}}

{{method save_encoder,}}

{{method load_encoder,}}

== {{class ConcatTextDataset:Dataset}}

=== Arguments
{{arg path,,}}

{{arg text_field,,}}

{{arg newline_eos,,True}}

{{arg encoding,,utf-8}}

== {{class ConcatTextDatasetFromDataFrames:Dataset}}

=== Arguments
{{arg df,,}}

{{arg text_field,,}}

{{arg col,,}}

{{arg newline_eos,,True}}

=== Methods

{{method splits,}}

== {{class LanguageModelData}}

=== Arguments
{{arg path,,}}

{{arg field,,}}

{{arg trn_ds,,}}

{{arg val_ds,,}}

{{arg test_ds,,}}

{{arg bs,,}}

{{arg bptt,,}}

{{arg backwards,,False}}

=== Methods

{{method get_model,Method returns a RNN_Learner object, that wraps an instance of the RNN_Encoder module.

Args:
    opt_fn (Optimizer): the torch optimizer function to use
    emb_sz (int): embedding size
    n_hid (int): number of hidden inputs
    n_layers (int): number of hidden layers
    kwargs: other arguments

Returns:
    An instance of the RNN_Learner class.}}

{{method from_dataframes,}}

{{method from_text_files,Method used to instantiate a LanguageModelData object that can be used for a
    supported nlp task.

Args:
    path (str): the absolute path in which temporary model data will be saved
    field (Field): torchtext field
    train (str): file location of the training data
    validation (str): file location of the validation data
    test (str): file location of the testing data
    bs (int): batch size to use
    bptt (int): back propagation through time hyper-parameter
    kwargs: other arguments

Returns:
    a LanguageModelData instance, which most importantly, provides us the datasets for training,
        validation, and testing

Note:
    The train, validation, and test path can be pointed to any file (or folder) that contains a valid
        text corpus.}}

== {{class TextDataLoader}}

=== Arguments
{{arg src,,}}

{{arg x_fld,,}}

{{arg y_fld,,}}

=== Methods

{{method __len__,}}

{{method __iter__,}}

== {{class TextModel:BasicModel}}

=== Methods

{{method get_layer_groups,}}

== {{class TextData:ModelData}}

=== Methods

{{method create_td,}}

{{method from_splits,}}

{{method to_model,}}

{{method get_model,}}

== Module Functions

{{method calc_pr,}}

{{method calc_r,}}

{{method flip_tensor,}}

