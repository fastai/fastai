
= fastai.dataset

== Introduction and overview

```
...example...
```


== {{class BaseDataset:Dataset}}

=== Arguments
{{arg transform,,None}}

=== Methods

{{method get1item,}}

{{method __getitem__,}}

{{method __len__,}}

{{method get,}}

{{method get_n,Return number of elements in the dataset == len(self).}}

{{method get_c,Return number of classes in a dataset.}}

{{method get_sz,Return maximum size of an image in a dataset.}}

{{method get_x,Return i-th example (image, wav, etc).}}

{{method get_y,Return i-th label.}}

{{method is_multi,Returns true if this data set contains multiple labels per sample.}}

{{method is_reg,True if the data set is used to train regression models.}}

== {{class FilesDataset:BaseDataset}}

=== Arguments
{{arg fnames,,}}

{{arg transform,,}}

{{arg path,,}}

=== Methods

{{method get_sz,}}

{{method get_x,}}

{{method get_n,}}

{{method resize_imgs,}}

{{method denorm,Reverse the normalization done to a batch of images.

Arguments:
    arr: of shape/size (N,3,sz,sz)}}

== {{class FilesArrayDataset:FilesDataset}}

=== Arguments
{{arg fnames,,}}

{{arg y,,}}

{{arg transform,,}}

{{arg path,,}}

=== Methods

{{method get_y,}}

{{method get_c,}}

== {{class FilesIndexArrayDataset:FilesArrayDataset}}

=== Methods

{{method get_c,}}

== {{class FilesNhotArrayDataset:FilesArrayDataset}}

=== Methods

{{method is_multi,}}

== {{class FilesIndexArrayRegressionDataset:FilesArrayDataset}}

=== Methods

{{method is_reg,}}

== {{class ArraysDataset:BaseDataset}}

=== Arguments
{{arg x,,}}

{{arg y,,}}

{{arg transform,,}}

=== Methods

{{method get_x,}}

{{method get_y,}}

{{method get_n,}}

{{method get_sz,}}

== {{class ArraysIndexDataset:ArraysDataset}}

=== Methods

{{method get_c,}}

{{method get_y,}}

== {{class ArraysNhotDataset:ArraysDataset}}

=== Methods

{{method get_c,}}

{{method is_multi,}}

== {{class ModelData}}

=== Arguments
{{arg path,,}}

{{arg trn_dl,,}}

{{arg val_dl,,}}

{{arg test_dl,,None}}

=== Methods

{{method from_dls,}}

{{method is_reg,}}

{{method is_multi,}}

{{method trn_ds,}}

{{method val_ds,}}

{{method test_ds,}}

{{method trn_y,}}

{{method val_y,}}

== {{class ImageData:ModelData}}

=== Arguments
{{arg path,,}}

{{arg datasets,,}}

{{arg bs,,}}

{{arg num_workers,,}}

{{arg classes,,}}

=== Methods

{{method get_dl,}}

{{method sz,}}

{{method c,}}

{{method resized,}}

{{method resize,}}

{{method get_ds,}}

== {{class ImageClassifierData:ImageData}}

=== Methods

{{method from_arrays,Read in images and their labels given as numpy arrays

Arguments:
    path: a root path of the data (used for storing trained models, precomputed values, etc)
    trn: a tuple of training data matrix and target label/classification array (e.g. `trn=(x,y)` where `x` has the
        shape of `(5000, 784)` and `y` has the shape of `(5000,)`)
    val: a tuple of validation data matrix and target label/classification array.
    bs: batch size
    tfms: transformations (for data augmentations). e.g. output of `tfms_from_model`
    classes: a list of all labels/classifications
    num_workers: a number of workers
    test: a matrix of test data (the shape should match `trn[0]`)

Returns:
    ImageClassifierData}}

{{method from_paths,Read in images and their labels given as sub-folder names

Arguments:
    path: a root path of the data (used for storing trained models, precomputed values, etc)
    bs: batch size
    tfms: transformations (for data augmentations). e.g. output of `tfms_from_model`
    trn_name: a name of the folder that contains training images.
    val_name:  a name of the folder that contains validation images.
    test_name:  a name of the folder that contains test images.
    num_workers: number of workers

Returns:
    ImageClassifierData}}

{{method from_csv,Read in images and their labels given as a CSV file.

This method should be used when training image labels are given in an CSV file as opposed to
sub-directories with label names.

Arguments:
    path: a root path of the data (used for storing trained models, precomputed values, etc)
    folder: a name of the folder in which training images are contained.
    csv_fname: a name of the CSV file which contains target labels.
    bs: batch size
    tfms: transformations (for data augmentations). e.g. output of `tfms_from_model`
    val_idxs: index of images to be used for validation. e.g. output of `get_cv_idxs`.
        If None, default arguments to get_cv_idxs are used.
    suffix: suffix to add to image names in CSV file (sometimes CSV only contains the file name without file
            extension e.g. '.jpg' - in which case, you can set suffix as '.jpg')
    test_name: a name of the folder which contains test images.
    continuous: TODO
    skip_header: skip the first row of the CSV file.
    num_workers: number of workers

Returns:
    ImageClassifierData}}

{{method from_names_and_array,}}

== Module Functions

{{method get_cv_idxs,Get a list of index values for Validation set from a dataset

Arguments:
    n : int, Total number of elements in the data set.
    cv_idx : int, starting index [idx_start = cv_idx*int(val_pct*n)] 
    val_pct : (int, float), validation set percentage 
    seed : seed value for RandomState
    
Returns:
    list of indexes }}

{{method resize_img,Enlarge or shrink a single image to scale, such that the smaller of the height or width dimension is equal to targ.}}

{{method resize_imgs,Enlarge or shrink a set of images in the same directory to scale, such that the smaller of the height or width dimension is equal to targ.
Note: 
-- This function is multithreaded for efficiency. 
-- When destination file or folder already exist, function exists without raising an error. }}

{{method read_dir,}}

{{method read_dirs,Fetches name of all files in path in long form, and labels associated by extrapolation of directory names. }}

{{method n_hot,one hot encoding by index. Returns array of length c, where all entries are 0, except for the indecies in ids}}

{{method folder_source,}}

{{method parse_csv_labels,Parse filenames and label sets from a CSV file.

This method expects that the csv file at path :fn: has two columns. If it
has a header, :skip_header: should be set to True. The labels in the
label set are expected to be space separated.

Arguments:
    fn: Path to a CSV file.
    skip_header: A boolean flag indicating whether to skip the header.

Returns:
    a four-tuple of (
        sorted image filenames,
        a dictionary of filenames and corresponding labels,
        a sorted set of unique labels,
        a dictionary of labels to their corresponding index, which will
        be one-hot encoded.
    )
.
:param cat_separator: the separator for the categories column}}

{{method nhot_labels,}}

{{method csv_source,}}

{{method dict_source,}}

{{method open_image,Opens an image using OpenCV given the file path.

Arguments:
    fn: the file path of the image

Returns:
    The image in RGB format as numpy array of floats normalized to range between 0.0 - 1.0}}

{{method split_by_idx,Split each array passed as *a, to a pair of arrays like this (elements selected by idxs,  the remaining elements)
This can be used to split multiple arrays containing training data to validation and training set.

:param idxs [int]: list of indexes selected
:param a list: list of np.array, each array should have same amount of elements in the first dimension
:return: list of tuples, each containing a split of corresponding array from *a.
        First element of each tuple is an array composed from elements selected by idxs,
        second element is an array of remaining elements.}}

